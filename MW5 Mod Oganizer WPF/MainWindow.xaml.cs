using MW5_Mod_Organizer_WPF.Models;
using MW5_Mod_Organizer_WPF.Services;
using System;
using System.Windows;
using System.Windows.Forms;
using MW5_Mod_Organizer_WPF.Facades;
using System.Collections.Generic;
using MW5_Mod_Organizer_WPF.ViewModels;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using System.Windows.Controls.Primitives;

namespace MW5_Mod_Organizer_WPF
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>

    /// <changelog> 
    /// Updated layout
    /// Mod configurations will now be backed up upon first loading.
    /// Added Reset to Defaults button to revert mod configuration to backed up configuration
    /// Added version number column when exporting loadorder.txt
    /// Improved notification when changes are made to trigger on more actions
    /// Removed Set Recovery button and Reset button (Will be replaced with Profiles later on)
    /// </changelog>

    /// <TODO>
    /// 
    /// </TODO>
    public partial class MainWindow : Window
    {
        public static ModViewModel? selectedMod = null;
        public static ModViewModel? selectedOverwrite = null;
        public static ModViewModel? selectedOverwrittenBy = null;
        private readonly MainViewModel? _mainViewModel;

        public MainWindow()
        {

            this.InitializeComponent();
            _mainViewModel = App.Current.Services.GetService<MainViewModel>();
            this.DataContext = _mainViewModel;

            UpdateModGridView();
        }

        private void SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (ModList.SelectedItems.Count != 0 && ModList.SelectedItems != null)
            {
                _mainViewModel!.SelectedItems = ModList.SelectedItems;
            }
        }

        private void ResizeConflictWindow(object sender, DragDeltaEventArgs e) 
        {
            var thumb = sender as Thumb;

            if (thumb != null)
            {
                resizableColumn.Width = new GridLength(resizableColumn.ActualWidth - e.HorizontalChange * 0.2, GridUnitType.Pixel);
            }
        }

        #region toolbar buttons
        private void ButtonExport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var dialog = new FolderBrowserDialog();
                DialogResult result = dialog.ShowDialog();
                if (result == System.Windows.Forms.DialogResult.OK)
                {
                    string content = "";

                    foreach (var modVM in ModService.GetInstance().ModVMCollection)
                    {
                        content += $"{modVM.LoadOrder} - {modVM.IsEnabled} - {modVM.DisplayName} - {modVM.Version} - {modVM.Author}\n";
                    }

                    FileHandlerService.WriteFile(dialog.SelectedPath, @"\loadorder.txt", $"~ This loadorder is generated by MW5 Mod Organizer. ~\n\n" +
                        $"{content}\n~ End of loadorder. ~");
                }
            }
            catch (Exception ex)
            {
                LoggerService.AddLog("ButtonExportException", ex.Message);
            }
        }
        #endregion

        #region folder buttons
        private void ButtonOpenFolder_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var dialog = new FolderBrowserDialog();
                DialogResult result = dialog.ShowDialog();
                if (result == System.Windows.Forms.DialogResult.OK)
                {
                    if (dialog.SelectedPath != Properties.Settings.Default.SecondaryPath)
                    {
                        Properties.Settings.Default.Path = dialog.SelectedPath;
                        Properties.Settings.Default.Save();
                        TextBoxFileExplorer.Text = Properties.Settings.Default.Path;

                        UpdateModGridView();
                    }
                    else if (dialog.SelectedPath == Properties.Settings.Default.SecondaryPath)
                    {
                        string message = "Primary path can not be the same as secondary path.";
                        string caption = "Reminder";
                        MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                        MessageBoxIcon icon = MessageBoxIcon.Error;

                        System.Windows.Forms.MessageBox.Show(message, caption, buttons, icon);
                    } 
                }
            }
            catch (Exception ex)
            {
                LoggerService.AddLog("ButtonOpenFolderException", ex.Message);
                TextBoxFileExplorer.Text = "Error trying to retrieve folder. Please try again.";
            }
        }

        private void ButtonOpenSecondaryFolder_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(Properties.Settings.Default.Path) && Properties.Settings.Default.Path != Properties.Settings.Default.SecondaryPath)
                {
                    var dialog = new FolderBrowserDialog();
                    DialogResult result = dialog.ShowDialog();
                    if (result == System.Windows.Forms.DialogResult.OK)
                    {
                        if (dialog.SelectedPath != Properties.Settings.Default.Path)
                        {
                            Properties.Settings.Default.SecondaryPath = dialog.SelectedPath;
                            Properties.Settings.Default.Save();
                            TextBoxSecondaryFileExplorer.Text = Properties.Settings.Default.SecondaryPath;

                            UpdateModGridView();
                        }
                        else if (dialog.SelectedPath == Properties.Settings.Default.Path)
                        {
                            string message = "Secondary path can not be the same as primary path.";
                            string caption = "Reminder";
                            MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                            MessageBoxIcon icon = MessageBoxIcon.Error;

                            System.Windows.Forms.MessageBox.Show(message, caption, buttons, icon);
                        } 
                    }
                } else
                {
                    string message = "You need to open a primary mod folder first.";
                    string caption = "Reminder";
                    MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                    MessageBoxIcon icon = MessageBoxIcon.Error;

                    System.Windows.Forms.MessageBox.Show(message, caption, buttons, icon);
                }
            }
            catch (Exception ex)
            {
                LoggerService.AddLog("ButtonSecondaryOpenFolderException", ex.Message);
                TextBoxFileExplorer.Text = "Error trying to retrieve secondary folder. Please try again.";
            }
        }
        #endregion

        #region conflict window
        private void ToggleButtonConflictWindow_Click(object sender, RoutedEventArgs e)
        {
            if (BorderConflictWindow.Visibility == Visibility.Collapsed)
            {
                BorderConflictWindow.Visibility = Visibility.Visible;
            } else if (BorderConflictWindow.Visibility == Visibility.Visible)
            {
                BorderConflictWindow.Visibility = Visibility.Collapsed;
            }
        }

        private void DataGridOverwrites_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (DataGridOverwrites.SelectedItem != null)
            {
                selectedOverwrite = DataGridOverwrites.SelectedItem as ModViewModel;
                DataGridOverwrittenBy.SelectedItem = null;

                if (selectedOverwrite != null)
                {
                    ModService.GetInstance().GenerateManifest(selectedOverwrite);
                }
            }
        }

        private void DataGridOverwrittenBy_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (DataGridOverwrittenBy.SelectedItem != null)
            {
                selectedOverwrittenBy = DataGridOverwrittenBy.SelectedItem as ModViewModel;
                DataGridOverwrites.SelectedItem = null;

                if (selectedOverwrittenBy != null)
                {
                    ModService.GetInstance().GenerateManifest(selectedOverwrittenBy);
                }
            }
        }
        #endregion

        #region functions
        private void UpdateModGridView(bool reset = false)
        {
            //Retrieve mods
            ModService.GetInstance().GetMods(reset);

            //Generate loadorder by index
            foreach (var mod in ModService.GetInstance().ModVMCollection) 
            {
                if (mod.LoadOrder != null)
                {
                    mod.LoadOrder = ModService.GetInstance().ModVMCollection.IndexOf(mod) + 1; 
                }
            }
        }
        #endregion
    }
}
